// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolHubApi.Data;

#nullable disable

namespace SchoolHubApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231022155052_ClassroomAdd")]
    partial class ClassroomAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParentPupil", b =>
                {
                    b.Property<int>("ChildrenId")
                        .HasColumnType("int");

                    b.Property<int>("ParentsId")
                        .HasColumnType("int");

                    b.HasKey("ChildrenId", "ParentsId");

                    b.HasIndex("ParentsId");

                    b.ToTable("ParentPupil");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassAccessCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Plan")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassAccessCode")
                        .IsUnique();

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserDataEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserDataEmail");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.Pupil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<string>("UserDataEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccessCode")
                        .IsUnique();

                    b.HasIndex("ClassroomId");

                    b.HasIndex("UserDataEmail");

                    b.ToTable("Pupils");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.ResetPasswordCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResetCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ResetPasswordCodes");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserDataEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserDataEmail");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.UserData", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Email = "schoolhubpl@gmail.com",
                            FirstName = "Admin",
                            LastName = "",
                            PasswordHash = new byte[] { 68, 13, 80, 156, 26, 43, 144, 54, 176, 108, 77, 11, 238, 69, 24, 89, 100, 122, 71, 164, 79, 56, 108, 224, 70, 203, 110, 229, 160, 215, 58, 20, 47, 220, 34, 72, 234, 100, 104, 148, 146, 211, 200, 206, 132, 79, 8, 92, 46, 173, 141, 16, 135, 132, 35, 166, 29, 116, 60, 250, 67, 53, 137, 106 },
                            PasswordSalt = new byte[] { 157, 133, 209, 5, 189, 32, 225, 246, 178, 220, 182, 117, 16, 214, 158, 29, 212, 181, 254, 201, 8, 214, 52, 15, 152, 92, 182, 102, 254, 76, 16, 234, 104, 125, 102, 76, 29, 31, 175, 81, 97, 52, 245, 4, 182, 46, 65, 90, 176, 164, 206, 45, 131, 38, 12, 76, 83, 186, 180, 188, 120, 195, 86, 80, 180, 24, 47, 71, 169, 236, 152, 192, 47, 134, 112, 205, 37, 52, 49, 170, 140, 178, 96, 226, 207, 43, 176, 226, 167, 81, 41, 100, 183, 38, 131, 171, 213, 215, 69, 36, 34, 121, 215, 148, 183, 1, 253, 11, 141, 17, 229, 151, 227, 42, 175, 56, 142, 70, 178, 130, 200, 214, 71, 43, 104, 1, 135, 219 },
                            Pesel = "",
                            PhoneNumber = "",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("ParentPupil", b =>
                {
                    b.HasOne("SchoolHubApi.Domain.Entities.Pupil", null)
                        .WithMany()
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolHubApi.Domain.Entities.Parent", null)
                        .WithMany()
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.Parent", b =>
                {
                    b.HasOne("SchoolHubApi.Domain.Entities.UserData", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.Pupil", b =>
                {
                    b.HasOne("SchoolHubApi.Domain.Entities.Classroom", "Classroom")
                        .WithMany("Pupils")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolHubApi.Domain.Entities.UserData", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.ResetPasswordCode", b =>
                {
                    b.HasOne("SchoolHubApi.Domain.Entities.UserData", null)
                        .WithOne("ResetPasswordCode")
                        .HasForeignKey("SchoolHubApi.Domain.Entities.ResetPasswordCode", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("SchoolHubApi.Domain.Entities.UserData", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.Classroom", b =>
                {
                    b.Navigation("Pupils");
                });

            modelBuilder.Entity("SchoolHubApi.Domain.Entities.UserData", b =>
                {
                    b.Navigation("ResetPasswordCode");
                });
#pragma warning restore 612, 618
        }
    }
}
